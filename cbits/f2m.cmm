#include "Cmm.h"

#if (__GLASGOW_HASKELL__ >= 707)
#define GHCHEAD
#endif

#define SETUP(p,size) \
SET_HDR(p, stg_ARR_WORDS_info, CCCS);   \
StgArrWords_bytes(p) = size;

#ifdef GHCHEAD
cmm_lzcnt (W_ a) {
    W_ r;
    (r) = ccall _clz(a);
    return(r);
}
#else
cmm_lzcnt {
    W_ r;
    (r) = foreign "C" _clz(R1) [];
    RET_N(r);
}
#endif

#ifdef GHCHEAD
gf2m_cmm_sqr (W_ asz, P_ aba) {
#else
gf2m_cmm_sqr
{
    W_ asz, aba;
    asz = R1; aba = R2;
#endif
    W_ rsz, r, rba, i;
    rsz = asz * 2;
#ifdef GHCHEAD
    ALLOC_PRIM_P(SIZEOF_StgArrWords + WDS(rsz), gf2m_cmm_sqr, aba);
#else
    ALLOC_PRIM(SIZEOF_StgArrWords + WDS(rsz), R2_PTR, gf2m_cmm_sqr);
#endif
    r = Hp - SIZEOF_StgArrWords - WDS(rsz-1);
    SETUP(r, WDS(rsz));

#ifdef GHCHEAD
    ccall gf2m_sqr(BYTE_ARR_CTS(r) "ptr", asz, BYTE_ARR_CTS(aba) "ptr");
    return(rsz, r);
#else
    foreign "C" gf2m_sqr(BYTE_ARR_CTS(r) "ptr", asz, BYTE_ARR_CTS(aba) "ptr") [];
    RET_NP(rsz, r);
#endif
}

#ifdef GHCHEAD
gf2m_cmm_mul (W_ asz, P_ aba, W_ bsz, P_ bba) {
#else
gf2m_cmm_mul
{
    W_ asz, aba, bsz, bba;
    asz = R1; aba = R2; bsz = R3; bba = R4;
#endif
    W_ rsz, r;
    rsz = asz + bsz + 1;
#ifdef GHCHEAD
    ALLOC_PRIM_P(SIZEOF_StgArrWords + WDS(rsz), gf2m_cmm_mul, aba & bba);
#else
    ALLOC_PRIM(SIZEOF_StgArrWords + WDS(rsz), R2_PTR & R4_PTR, gf2m_cmm_mul);
#endif
    r = Hp - SIZEOF_StgArrWords - WDS(rsz-1);
    SETUP(r, WDS(rsz));
    aba = BYTE_ARR_CTS(aba);
    bba = BYTE_ARR_CTS(bba);

#ifdef GHCHEAD
    ccall gf2m_mul(BYTE_ARR_CTS(r) "ptr", asz, aba "ptr", bsz, bba "ptr");
    return(rsz, r);
#else
    foreign "C" gf2m_mul(BYTE_ARR_CTS(r) "ptr", asz, aba "ptr", bsz, bba "ptr") [];
    RET_NP(rsz, r);
#endif
}

#ifdef GHCHEAD
gf2m_cmm_mod (W_ asz, P_ aba, P_ pba) {
    ALLOC_PRIM_P(SIZEOF_StgArrWords + WDS(asz), gf2m_cmm_mod, aba & pba);
#else
gf2m_cmm_mod {
    W_ asz, aba, pba;
    asz = R1; aba = R2; pba = R3;
    ALLOC_PRIM(SIZEOF_StgArrWords + WDS(asz), R2_PTR & R3_PTR, gf2m_cmm_mod);
#endif
    W_ rsz, r, psz;
    r = Hp - SIZEOF_StgArrWords - WDS(asz-1);
    SETUP(r, WDS(asz));

    psz = StgArrWords_bytes(pba)/WDS(1);

#ifdef GHCHEAD
    (rsz) = ccall gf2m_mod(BYTE_ARR_CTS(r) "ptr", asz, BYTE_ARR_CTS(aba) "ptr", psz, BYTE_ARR_CTS(pba) "ptr");
    return(rsz, r);
#else
    (rsz) = foreign "C" gf2m_mod(BYTE_ARR_CTS(r) "ptr", asz, BYTE_ARR_CTS(aba) "ptr", psz, BYTE_ARR_CTS(pba) "ptr") [];
    RET_NP(rsz, r);
#endif
}


#ifdef GHCHEAD
gf2m_cmm_div (W_ xsz, P_ xba, W_ asz, P_ aba, W_ top, P_ pba) {
    W_ tmp;
    tmp = WDS(top);
    ALLOC_PRIM_P(SIZEOF_StgArrWords + tmp, gf2m_cmm_div, xba & aba & pba );
#else
gf2m_cmm_div {
    W_ asz, aba, xsz, xba, top, pba; // inputs and outputs
    xsz = R1; xba = R2; asz = R3; aba = R4; top = R5; pba = R6;
    W_ tmp;
    tmp = WDS(top);
    ALLOC_PRIM(SIZEOF_StgArrWords + tmp, R2_PTR & R4_PTR & R6_PTR, gf2m_cmm_div);
#endif
    W_ rsz, r, bba;
    pba = BYTE_ARR_CTS(pba);
    aba = BYTE_ARR_CTS(aba);
    xba = BYTE_ARR_CTS(xba);

    r = Hp - SIZEOF_StgArrWords - tmp + WDS(1);
    SETUP(r,tmp);

#ifdef GHCHEAD
    MAYBE_GC_N(gf2m_cmm_div, R2_PTR & R4_PTR & R6_PTR);
#else
    MAYBE_GC(R2_PTR & R4_PTR & R6_PTR, gf2m_cmm_div);
#endif

    bba = BYTE_ARR_CTS(r);

#ifdef GHCHEAD
    (rsz) = ccall gf2m_div(bba "ptr", xsz, xba "ptr", asz, aba "ptr", top, pba "ptr");
    return(rsz, r);
#else
    (rsz) = foreign "C" gf2m_div(bba "ptr", xsz, xba "ptr", asz, aba "ptr", top, pba "ptr") [];
    RET_NP(rsz, r);
#endif
}
